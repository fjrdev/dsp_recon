// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mac_mac,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvc1902-vsva2197-2MP-e-S,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1580,HLS_SYN_LUT=1801,HLS_VERSION=2023_1}" *)

module mac (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_pp0_stage1 = 5'd4;
parameter    ap_ST_fsm_pp0_stage2 = 5'd8;
parameter    ap_ST_fsm_state147 = 5'd16;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
wire    ap_continue;
reg    ap_done_reg;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] a;
wire   [63:0] b;
wire   [63:0] c;
wire   [31:0] size;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln11_reg_347;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter24;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg    ap_enable_reg_pp0_iter1;
reg    gmem_blk_n_AW;
reg    ap_enable_reg_pp0_iter25;
reg    gmem_blk_n_W;
reg    gmem_blk_n_B;
reg    ap_enable_reg_pp0_iter48;
reg    ap_block_state1;
reg   [63:0] c_read_reg_332;
wire  signed [62:0] sext_ln11_fu_187_p1;
reg  signed [62:0] sext_ln11_reg_337;
wire  signed [62:0] sext_ln11_1_fu_201_p1;
reg  signed [62:0] sext_ln11_1_reg_342;
wire   [0:0] icmp_ln11_fu_223_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
wire   [31:0] gmem_WDATA;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire   [8:0] gmem_RFIFONUM;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state8_pp0_stage0_iter2;
wire    ap_block_state11_pp0_stage0_iter3;
wire    ap_block_state14_pp0_stage0_iter4;
wire    ap_block_state17_pp0_stage0_iter5;
wire    ap_block_state20_pp0_stage0_iter6;
wire    ap_block_state23_pp0_stage0_iter7;
wire    ap_block_state26_pp0_stage0_iter8;
wire    ap_block_state29_pp0_stage0_iter9;
wire    ap_block_state32_pp0_stage0_iter10;
wire    ap_block_state35_pp0_stage0_iter11;
wire    ap_block_state38_pp0_stage0_iter12;
wire    ap_block_state41_pp0_stage0_iter13;
wire    ap_block_state44_pp0_stage0_iter14;
wire    ap_block_state47_pp0_stage0_iter15;
wire    ap_block_state50_pp0_stage0_iter16;
wire    ap_block_state53_pp0_stage0_iter17;
wire    ap_block_state56_pp0_stage0_iter18;
wire    ap_block_state59_pp0_stage0_iter19;
wire    ap_block_state62_pp0_stage0_iter20;
wire    ap_block_state65_pp0_stage0_iter21;
wire    ap_block_state68_pp0_stage0_iter22;
wire    ap_block_state71_pp0_stage0_iter23;
reg    ap_block_state74_pp0_stage0_iter24;
wire    ap_block_state77_pp0_stage0_iter25;
wire    ap_block_state80_pp0_stage0_iter26;
wire    ap_block_state83_pp0_stage0_iter27;
wire    ap_block_state86_pp0_stage0_iter28;
wire    ap_block_state89_pp0_stage0_iter29;
wire    ap_block_state92_pp0_stage0_iter30;
wire    ap_block_state95_pp0_stage0_iter31;
wire    ap_block_state98_pp0_stage0_iter32;
wire    ap_block_state101_pp0_stage0_iter33;
wire    ap_block_state104_pp0_stage0_iter34;
wire    ap_block_state107_pp0_stage0_iter35;
wire    ap_block_state110_pp0_stage0_iter36;
wire    ap_block_state113_pp0_stage0_iter37;
wire    ap_block_state116_pp0_stage0_iter38;
wire    ap_block_state119_pp0_stage0_iter39;
wire    ap_block_state122_pp0_stage0_iter40;
wire    ap_block_state125_pp0_stage0_iter41;
wire    ap_block_state128_pp0_stage0_iter42;
wire    ap_block_state131_pp0_stage0_iter43;
wire    ap_block_state134_pp0_stage0_iter44;
wire    ap_block_state137_pp0_stage0_iter45;
wire    ap_block_state140_pp0_stage0_iter46;
wire    ap_block_state143_pp0_stage0_iter47;
reg    ap_block_state146_pp0_stage0_iter48;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] gmem_addr_reg_351;
reg   [63:0] gmem_addr_1_reg_357;
reg   [63:0] gmem_addr_2_reg_363;
reg   [63:0] gmem_addr_2_reg_363_pp0_iter1_reg;
reg   [63:0] gmem_addr_2_reg_363_pp0_iter2_reg;
reg   [63:0] gmem_addr_2_reg_363_pp0_iter3_reg;
reg   [63:0] gmem_addr_2_reg_363_pp0_iter4_reg;
reg   [63:0] gmem_addr_2_reg_363_pp0_iter5_reg;
reg   [63:0] gmem_addr_2_reg_363_pp0_iter6_reg;
reg   [63:0] gmem_addr_2_reg_363_pp0_iter7_reg;
reg   [63:0] gmem_addr_2_reg_363_pp0_iter8_reg;
reg   [63:0] gmem_addr_2_reg_363_pp0_iter9_reg;
reg   [63:0] gmem_addr_2_reg_363_pp0_iter10_reg;
reg   [63:0] gmem_addr_2_reg_363_pp0_iter11_reg;
reg   [63:0] gmem_addr_2_reg_363_pp0_iter12_reg;
reg   [63:0] gmem_addr_2_reg_363_pp0_iter13_reg;
reg   [63:0] gmem_addr_2_reg_363_pp0_iter14_reg;
reg   [63:0] gmem_addr_2_reg_363_pp0_iter15_reg;
reg   [63:0] gmem_addr_2_reg_363_pp0_iter16_reg;
reg   [63:0] gmem_addr_2_reg_363_pp0_iter17_reg;
reg   [63:0] gmem_addr_2_reg_363_pp0_iter18_reg;
reg   [63:0] gmem_addr_2_reg_363_pp0_iter19_reg;
reg   [63:0] gmem_addr_2_reg_363_pp0_iter20_reg;
reg   [63:0] gmem_addr_2_reg_363_pp0_iter21_reg;
reg   [63:0] gmem_addr_2_reg_363_pp0_iter22_reg;
reg   [63:0] gmem_addr_2_reg_363_pp0_iter23_reg;
reg   [63:0] gmem_addr_2_reg_363_pp0_iter24_reg;
reg   [31:0] gmem_addr_read_reg_370;
reg   [31:0] gmem_addr_1_read_reg_375;
wire    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state3_io;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state9_pp0_stage1_iter2;
wire    ap_block_state12_pp0_stage1_iter3;
wire    ap_block_state15_pp0_stage1_iter4;
wire    ap_block_state18_pp0_stage1_iter5;
wire    ap_block_state21_pp0_stage1_iter6;
wire    ap_block_state24_pp0_stage1_iter7;
wire    ap_block_state27_pp0_stage1_iter8;
wire    ap_block_state30_pp0_stage1_iter9;
wire    ap_block_state33_pp0_stage1_iter10;
wire    ap_block_state36_pp0_stage1_iter11;
wire    ap_block_state39_pp0_stage1_iter12;
wire    ap_block_state42_pp0_stage1_iter13;
wire    ap_block_state45_pp0_stage1_iter14;
wire    ap_block_state48_pp0_stage1_iter15;
wire    ap_block_state51_pp0_stage1_iter16;
wire    ap_block_state54_pp0_stage1_iter17;
wire    ap_block_state57_pp0_stage1_iter18;
wire    ap_block_state60_pp0_stage1_iter19;
wire    ap_block_state63_pp0_stage1_iter20;
wire    ap_block_state66_pp0_stage1_iter21;
wire    ap_block_state69_pp0_stage1_iter22;
wire    ap_block_state72_pp0_stage1_iter23;
reg    ap_block_state75_pp0_stage1_iter24;
wire    ap_block_state78_pp0_stage1_iter25;
wire    ap_block_state81_pp0_stage1_iter26;
wire    ap_block_state84_pp0_stage1_iter27;
wire    ap_block_state87_pp0_stage1_iter28;
wire    ap_block_state90_pp0_stage1_iter29;
wire    ap_block_state93_pp0_stage1_iter30;
wire    ap_block_state96_pp0_stage1_iter31;
wire    ap_block_state99_pp0_stage1_iter32;
wire    ap_block_state102_pp0_stage1_iter33;
wire    ap_block_state105_pp0_stage1_iter34;
wire    ap_block_state108_pp0_stage1_iter35;
wire    ap_block_state111_pp0_stage1_iter36;
wire    ap_block_state114_pp0_stage1_iter37;
wire    ap_block_state117_pp0_stage1_iter38;
wire    ap_block_state120_pp0_stage1_iter39;
wire    ap_block_state123_pp0_stage1_iter40;
wire    ap_block_state126_pp0_stage1_iter41;
wire    ap_block_state129_pp0_stage1_iter42;
wire    ap_block_state132_pp0_stage1_iter43;
wire    ap_block_state135_pp0_stage1_iter44;
wire    ap_block_state138_pp0_stage1_iter45;
wire    ap_block_state141_pp0_stage1_iter46;
wire    ap_block_state144_pp0_stage1_iter47;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] gmem_addr_2_read_reg_380;
wire    ap_block_state4_pp0_stage2_iter0;
reg    ap_block_state4_io;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_state10_pp0_stage2_iter2;
wire    ap_block_state13_pp0_stage2_iter3;
wire    ap_block_state16_pp0_stage2_iter4;
wire    ap_block_state19_pp0_stage2_iter5;
wire    ap_block_state22_pp0_stage2_iter6;
wire    ap_block_state25_pp0_stage2_iter7;
wire    ap_block_state28_pp0_stage2_iter8;
wire    ap_block_state31_pp0_stage2_iter9;
wire    ap_block_state34_pp0_stage2_iter10;
wire    ap_block_state37_pp0_stage2_iter11;
wire    ap_block_state40_pp0_stage2_iter12;
wire    ap_block_state43_pp0_stage2_iter13;
wire    ap_block_state46_pp0_stage2_iter14;
wire    ap_block_state49_pp0_stage2_iter15;
wire    ap_block_state52_pp0_stage2_iter16;
wire    ap_block_state55_pp0_stage2_iter17;
wire    ap_block_state58_pp0_stage2_iter18;
wire    ap_block_state61_pp0_stage2_iter19;
wire    ap_block_state64_pp0_stage2_iter20;
wire    ap_block_state67_pp0_stage2_iter21;
wire    ap_block_state70_pp0_stage2_iter22;
wire    ap_block_state73_pp0_stage2_iter23;
reg    ap_block_state76_pp0_stage2_iter24;
wire    ap_block_state79_pp0_stage2_iter25;
wire    ap_block_state82_pp0_stage2_iter26;
wire    ap_block_state85_pp0_stage2_iter27;
wire    ap_block_state88_pp0_stage2_iter28;
wire    ap_block_state91_pp0_stage2_iter29;
wire    ap_block_state94_pp0_stage2_iter30;
wire    ap_block_state97_pp0_stage2_iter31;
wire    ap_block_state100_pp0_stage2_iter32;
wire    ap_block_state103_pp0_stage2_iter33;
wire    ap_block_state106_pp0_stage2_iter34;
wire    ap_block_state109_pp0_stage2_iter35;
wire    ap_block_state112_pp0_stage2_iter36;
wire    ap_block_state115_pp0_stage2_iter37;
wire    ap_block_state118_pp0_stage2_iter38;
wire    ap_block_state121_pp0_stage2_iter39;
wire    ap_block_state124_pp0_stage2_iter40;
wire    ap_block_state127_pp0_stage2_iter41;
wire    ap_block_state130_pp0_stage2_iter42;
wire    ap_block_state133_pp0_stage2_iter43;
wire    ap_block_state136_pp0_stage2_iter44;
wire    ap_block_state139_pp0_stage2_iter45;
wire    ap_block_state142_pp0_stage2_iter46;
wire    ap_block_state145_pp0_stage2_iter47;
reg    ap_block_pp0_stage2_11001;
wire   [31:0] add_fu_170_p4;
reg   [31:0] add_reg_385;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage2_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter42;
reg    ap_enable_reg_pp0_iter43;
reg    ap_enable_reg_pp0_iter44;
reg    ap_enable_reg_pp0_iter45;
reg    ap_enable_reg_pp0_iter46;
reg    ap_enable_reg_pp0_iter47;
wire  signed [63:0] sext_ln12_1_fu_237_p1;
wire  signed [63:0] sext_ln12_2_fu_252_p1;
wire  signed [63:0] sext_ln12_fu_289_p1;
reg    ap_block_pp0_stage1_01001;
reg   [30:0] i_fu_96;
wire   [30:0] add_ln11_fu_213_p2;
wire   [31:0] add_fu_170_p1;
wire   [31:0] add_fu_170_p2;
wire   [31:0] add_fu_170_p3;
wire   [61:0] trunc_ln_fu_177_p4;
wire   [61:0] trunc_ln11_1_fu_191_p4;
wire   [31:0] i_cast_fu_219_p1;
wire   [62:0] i_cast1_fu_228_p1;
wire   [62:0] add_ln12_fu_232_p2;
wire   [62:0] add_ln12_1_fu_247_p2;
wire   [32:0] shl_ln_fu_262_p3;
wire   [63:0] zext_ln12_fu_270_p1;
wire   [63:0] add_ln12_2_fu_274_p2;
wire   [61:0] trunc_ln1_fu_279_p4;
wire    ap_CS_fsm_state147;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state147_blk;
reg    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter48 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_enable_reg_pp0_iter43 = 1'b0;
#0 ap_enable_reg_pp0_iter44 = 1'b0;
#0 ap_enable_reg_pp0_iter45 = 1'b0;
#0 ap_enable_reg_pp0_iter46 = 1'b0;
#0 ap_enable_reg_pp0_iter47 = 1'b0;
end

mac_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .a(a),
    .b(b),
    .c(c),
    .size(size),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle)
);

mac_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 69 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARLEN(32'd1),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RFIFONUM(gmem_RFIFONUM),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_2_reg_363_pp0_iter24_reg),
    .I_AWLEN(32'd1),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(gmem_WDATA),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY)
);

mac_fmadd_32ns_32ns_32ns_32ns_32_1_primitive_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmadd_32ns_32ns_32ns_32ns_32_1_primitive_dsp_1_U1(
    .din0(32'd0),
    .din1(add_fu_170_p1),
    .din2(add_fu_170_p2),
    .din3(add_fu_170_p3),
    .dout(add_fu_170_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state147)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter43 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter44 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter45 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter46 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter47 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter48 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter47 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter48 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_96 <= 31'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln11_fu_223_p2 == 1'd1))) begin
        i_fu_96 <= add_ln11_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_reg_385 <= add_fu_170_p4;
        gmem_addr_2_reg_363_pp0_iter10_reg <= gmem_addr_2_reg_363_pp0_iter9_reg;
        gmem_addr_2_reg_363_pp0_iter11_reg <= gmem_addr_2_reg_363_pp0_iter10_reg;
        gmem_addr_2_reg_363_pp0_iter12_reg <= gmem_addr_2_reg_363_pp0_iter11_reg;
        gmem_addr_2_reg_363_pp0_iter13_reg <= gmem_addr_2_reg_363_pp0_iter12_reg;
        gmem_addr_2_reg_363_pp0_iter14_reg <= gmem_addr_2_reg_363_pp0_iter13_reg;
        gmem_addr_2_reg_363_pp0_iter15_reg <= gmem_addr_2_reg_363_pp0_iter14_reg;
        gmem_addr_2_reg_363_pp0_iter16_reg <= gmem_addr_2_reg_363_pp0_iter15_reg;
        gmem_addr_2_reg_363_pp0_iter17_reg <= gmem_addr_2_reg_363_pp0_iter16_reg;
        gmem_addr_2_reg_363_pp0_iter18_reg <= gmem_addr_2_reg_363_pp0_iter17_reg;
        gmem_addr_2_reg_363_pp0_iter19_reg <= gmem_addr_2_reg_363_pp0_iter18_reg;
        gmem_addr_2_reg_363_pp0_iter1_reg <= gmem_addr_2_reg_363;
        gmem_addr_2_reg_363_pp0_iter20_reg <= gmem_addr_2_reg_363_pp0_iter19_reg;
        gmem_addr_2_reg_363_pp0_iter21_reg <= gmem_addr_2_reg_363_pp0_iter20_reg;
        gmem_addr_2_reg_363_pp0_iter22_reg <= gmem_addr_2_reg_363_pp0_iter21_reg;
        gmem_addr_2_reg_363_pp0_iter23_reg <= gmem_addr_2_reg_363_pp0_iter22_reg;
        gmem_addr_2_reg_363_pp0_iter24_reg <= gmem_addr_2_reg_363_pp0_iter23_reg;
        gmem_addr_2_reg_363_pp0_iter2_reg <= gmem_addr_2_reg_363_pp0_iter1_reg;
        gmem_addr_2_reg_363_pp0_iter3_reg <= gmem_addr_2_reg_363_pp0_iter2_reg;
        gmem_addr_2_reg_363_pp0_iter4_reg <= gmem_addr_2_reg_363_pp0_iter3_reg;
        gmem_addr_2_reg_363_pp0_iter5_reg <= gmem_addr_2_reg_363_pp0_iter4_reg;
        gmem_addr_2_reg_363_pp0_iter6_reg <= gmem_addr_2_reg_363_pp0_iter5_reg;
        gmem_addr_2_reg_363_pp0_iter7_reg <= gmem_addr_2_reg_363_pp0_iter6_reg;
        gmem_addr_2_reg_363_pp0_iter8_reg <= gmem_addr_2_reg_363_pp0_iter7_reg;
        gmem_addr_2_reg_363_pp0_iter9_reg <= gmem_addr_2_reg_363_pp0_iter8_reg;
        gmem_addr_read_reg_370 <= gmem_RDATA;
        icmp_ln11_reg_347 <= icmp_ln11_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        c_read_reg_332 <= c;
        sext_ln11_1_reg_342 <= sext_ln11_1_fu_201_p1;
        sext_ln11_reg_337 <= sext_ln11_fu_187_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        gmem_addr_1_read_reg_375 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln11_fu_223_p2 == 1'd1))) begin
        gmem_addr_1_reg_357 <= sext_ln12_2_fu_252_p1;
        gmem_addr_2_reg_363 <= sext_ln12_fu_289_p1;
        gmem_addr_reg_351 <= sext_ln12_1_fu_237_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        gmem_addr_2_read_reg_380 <= gmem_RDATA;
    end
end

assign ap_ST_fsm_state147_blk = 1'b0;

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln11_fu_223_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state147)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter47 == 1'b0) & (ap_enable_reg_pp0_iter46 == 1'b0) & (ap_enable_reg_pp0_iter45 == 1'b0) & (ap_enable_reg_pp0_iter44 == 1'b0) & (ap_enable_reg_pp0_iter43 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 
    == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter48 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state147)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        gmem_ARADDR = gmem_addr_2_reg_363;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln11_reg_347 == 1'd1))) begin
        gmem_ARADDR = gmem_addr_1_reg_357;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln11_reg_347 == 1'd1))) begin
        gmem_ARADDR = gmem_addr_reg_351;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln11_reg_347 == 1'd1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln11_reg_347 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter25 == 1'b1))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter48 == 1'b1))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter24 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter24 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter24 == 1'b1)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter25 == 1'b1))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln11_reg_347 == 1'd1)) | ((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln11_reg_347 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter25 == 1'b1))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter48 == 1'b1))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter24 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter24 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter24 == 1'b1)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter25 == 1'b1))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln11_fu_223_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter47 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter48 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln11_fu_223_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter47 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter48 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state147;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_fu_170_p1 = gmem_addr_read_reg_370;

assign add_fu_170_p2 = gmem_addr_1_read_reg_375;

assign add_fu_170_p3 = gmem_addr_2_read_reg_380;

assign add_ln11_fu_213_p2 = (i_fu_96 + 31'd1);

assign add_ln12_1_fu_247_p2 = ($signed(i_cast1_fu_228_p1) + $signed(sext_ln11_1_reg_342));

assign add_ln12_2_fu_274_p2 = (zext_ln12_fu_270_p1 + c_read_reg_332);

assign add_ln12_fu_232_p2 = ($signed(i_cast1_fu_228_p1) + $signed(sext_ln11_reg_337));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state147 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((gmem_BVALID == 1'b0) & (ap_enable_reg_pp0_iter48 == 1'b1)) | ((gmem_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b1)) | ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b1)) | ((gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((gmem_BVALID == 1'b0) & (ap_enable_reg_pp0_iter48 == 1'b1)) | ((gmem_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b1)) | ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b1)) | ((gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b1)) | ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b1)) | ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_io)) | ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_io)) | ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state100_pp0_stage2_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state101_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state102_pp0_stage1_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state103_pp0_stage2_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state104_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state105_pp0_stage1_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state106_pp0_stage2_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state107_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state108_pp0_stage1_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state109_pp0_stage2_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state110_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state111_pp0_stage1_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state112_pp0_stage2_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state113_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state114_pp0_stage1_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state115_pp0_stage2_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state116_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state117_pp0_stage1_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state118_pp0_stage2_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state119_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state120_pp0_stage1_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state121_pp0_stage2_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state122_pp0_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state123_pp0_stage1_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state124_pp0_stage2_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state125_pp0_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state126_pp0_stage1_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state127_pp0_stage2_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state128_pp0_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state129_pp0_stage1_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state130_pp0_stage2_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state131_pp0_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state132_pp0_stage1_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state133_pp0_stage2_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state134_pp0_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state135_pp0_stage1_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state136_pp0_stage2_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state137_pp0_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state138_pp0_stage1_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state139_pp0_stage2_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state140_pp0_stage0_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state141_pp0_stage1_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state142_pp0_stage2_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state143_pp0_stage0_iter47 = ~(1'b1 == 1'b1);

assign ap_block_state144_pp0_stage1_iter47 = ~(1'b1 == 1'b1);

assign ap_block_state145_pp0_stage2_iter47 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state146_pp0_stage0_iter48 = (gmem_BVALID == 1'b0);
end

assign ap_block_state14_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage2_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage2_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage2_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage2_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage1_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage2_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage1_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage2_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage1_iter12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((gmem_ARREADY == 1'b0) & (icmp_ln11_reg_347 == 1'd1));
end

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage2_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage1_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage2_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage1_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage2_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage1_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage2_iter15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((gmem_ARREADY == 1'b0) & (icmp_ln11_reg_347 == 1'd1));
end

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage1_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage2_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage1_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage2_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage1_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage2_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage1_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage2_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage1_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage2_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage1_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage2_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage1_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage2_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage1_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage2_iter23 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state74_pp0_stage0_iter24 = (gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state75_pp0_stage1_iter24 = (gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state76_pp0_stage2_iter24 = (gmem_RVALID == 1'b0);
end

assign ap_block_state77_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp0_stage1_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp0_stage2_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp0_stage1_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp0_stage2_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp0_stage1_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp0_stage2_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp0_stage1_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp0_stage2_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state89_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state90_pp0_stage1_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state91_pp0_stage2_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state92_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state93_pp0_stage1_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state94_pp0_stage2_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state95_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp0_stage1_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state97_pp0_stage2_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state98_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state99_pp0_stage1_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign gmem_WDATA = add_reg_385;

assign i_cast1_fu_228_p1 = i_fu_96;

assign i_cast_fu_219_p1 = i_fu_96;

assign icmp_ln11_fu_223_p2 = (($signed(i_cast_fu_219_p1) < $signed(size)) ? 1'b1 : 1'b0);

assign sext_ln11_1_fu_201_p1 = $signed(trunc_ln11_1_fu_191_p4);

assign sext_ln11_fu_187_p1 = $signed(trunc_ln_fu_177_p4);

assign sext_ln12_1_fu_237_p1 = $signed(add_ln12_fu_232_p2);

assign sext_ln12_2_fu_252_p1 = $signed(add_ln12_1_fu_247_p2);

assign sext_ln12_fu_289_p1 = $signed(trunc_ln1_fu_279_p4);

assign shl_ln_fu_262_p3 = {{i_fu_96}, {2'd0}};

assign trunc_ln11_1_fu_191_p4 = {{b[63:2]}};

assign trunc_ln1_fu_279_p4 = {{add_ln12_2_fu_274_p2[63:2]}};

assign trunc_ln_fu_177_p4 = {{a[63:2]}};

assign zext_ln12_fu_270_p1 = shl_ln_fu_262_p3;

endmodule //mac
